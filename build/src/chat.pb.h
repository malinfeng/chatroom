// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chat_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chat_2eproto;
namespace chat {
class ChatMsgHead;
class ChatMsgHeadDefaultTypeInternal;
extern ChatMsgHeadDefaultTypeInternal _ChatMsgHead_default_instance_;
class LoginReq;
class LoginReqDefaultTypeInternal;
extern LoginReqDefaultTypeInternal _LoginReq_default_instance_;
class LoginRsp;
class LoginRspDefaultTypeInternal;
extern LoginRspDefaultTypeInternal _LoginRsp_default_instance_;
}  // namespace chat
PROTOBUF_NAMESPACE_OPEN
template<> ::chat::ChatMsgHead* Arena::CreateMaybeMessage<::chat::ChatMsgHead>(Arena*);
template<> ::chat::LoginReq* Arena::CreateMaybeMessage<::chat::LoginReq>(Arena*);
template<> ::chat::LoginRsp* Arena::CreateMaybeMessage<::chat::LoginRsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chat {

enum msg_type : int {
  welcome = 0,
  login = 1,
  list_friend = 2,
  list_record = 3,
  add_friend = 4,
  delete_friend = 5,
  chat_broadcast = 6,
  chat_private = 7,
  msg_type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  msg_type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool msg_type_IsValid(int value);
constexpr msg_type msg_type_MIN = welcome;
constexpr msg_type msg_type_MAX = chat_private;
constexpr int msg_type_ARRAYSIZE = msg_type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* msg_type_descriptor();
template<typename T>
inline const std::string& msg_type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, msg_type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function msg_type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    msg_type_descriptor(), enum_t_value);
}
inline bool msg_type_Parse(
    const std::string& name, msg_type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<msg_type>(
    msg_type_descriptor(), name, value);
}
enum msg_req : int {
  request = 0,
  response = 1,
  msg_req_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  msg_req_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool msg_req_IsValid(int value);
constexpr msg_req msg_req_MIN = request;
constexpr msg_req msg_req_MAX = response;
constexpr int msg_req_ARRAYSIZE = msg_req_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* msg_req_descriptor();
template<typename T>
inline const std::string& msg_req_Name(T enum_t_value) {
  static_assert(::std::is_same<T, msg_req>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function msg_req_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    msg_req_descriptor(), enum_t_value);
}
inline bool msg_req_Parse(
    const std::string& name, msg_req* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<msg_req>(
    msg_req_descriptor(), name, value);
}
// ===================================================================

class ChatMsgHead :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.ChatMsgHead) */ {
 public:
  ChatMsgHead();
  virtual ~ChatMsgHead();

  ChatMsgHead(const ChatMsgHead& from);
  ChatMsgHead(ChatMsgHead&& from) noexcept
    : ChatMsgHead() {
    *this = ::std::move(from);
  }

  inline ChatMsgHead& operator=(const ChatMsgHead& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatMsgHead& operator=(ChatMsgHead&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChatMsgHead& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatMsgHead* internal_default_instance() {
    return reinterpret_cast<const ChatMsgHead*>(
               &_ChatMsgHead_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChatMsgHead& a, ChatMsgHead& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatMsgHead* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatMsgHead* New() const final {
    return CreateMaybeMessage<ChatMsgHead>(nullptr);
  }

  ChatMsgHead* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatMsgHead>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChatMsgHead& from);
  void MergeFrom(const ChatMsgHead& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatMsgHead* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.ChatMsgHead";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2eproto);
    return ::descriptor_table_chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kReqFieldNumber = 2,
    kTimeFieldNumber = 3,
    kMsgLenFieldNumber = 4,
  };
  // .chat.msg_type type = 1;
  void clear_type();
  ::chat::msg_type type() const;
  void set_type(::chat::msg_type value);
  private:
  ::chat::msg_type _internal_type() const;
  void _internal_set_type(::chat::msg_type value);
  public:

  // .chat.msg_req req = 2;
  void clear_req();
  ::chat::msg_req req() const;
  void set_req(::chat::msg_req value);
  private:
  ::chat::msg_req _internal_req() const;
  void _internal_set_req(::chat::msg_req value);
  public:

  // uint64 time = 3;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 msg_len = 4;
  void clear_msg_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_len() const;
  void set_msg_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_msg_len() const;
  void _internal_set_msg_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:chat.ChatMsgHead)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  int req_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_len_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class LoginReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.LoginReq) */ {
 public:
  LoginReq();
  virtual ~LoginReq();

  LoginReq(const LoginReq& from);
  LoginReq(LoginReq&& from) noexcept
    : LoginReq() {
    *this = ::std::move(from);
  }

  inline LoginReq& operator=(const LoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginReq& operator=(LoginReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginReq* internal_default_instance() {
    return reinterpret_cast<const LoginReq*>(
               &_LoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LoginReq& a, LoginReq& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginReq* New() const final {
    return CreateMaybeMessage<LoginReq>(nullptr);
  }

  LoginReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginReq& from);
  void MergeFrom(const LoginReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.LoginReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2eproto);
    return ::descriptor_table_chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnameFieldNumber = 2,
    kUidFieldNumber = 1,
  };
  // string uname = 2;
  void clear_uname();
  const std::string& uname() const;
  void set_uname(const std::string& value);
  void set_uname(std::string&& value);
  void set_uname(const char* value);
  void set_uname(const char* value, size_t size);
  std::string* mutable_uname();
  std::string* release_uname();
  void set_allocated_uname(std::string* uname);
  private:
  const std::string& _internal_uname() const;
  void _internal_set_uname(const std::string& value);
  std::string* _internal_mutable_uname();
  public:

  // uint32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:chat.LoginReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uname_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class LoginRsp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.LoginRsp) */ {
 public:
  LoginRsp();
  virtual ~LoginRsp();

  LoginRsp(const LoginRsp& from);
  LoginRsp(LoginRsp&& from) noexcept
    : LoginRsp() {
    *this = ::std::move(from);
  }

  inline LoginRsp& operator=(const LoginRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRsp& operator=(LoginRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRsp* internal_default_instance() {
    return reinterpret_cast<const LoginRsp*>(
               &_LoginRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LoginRsp& a, LoginRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRsp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginRsp* New() const final {
    return CreateMaybeMessage<LoginRsp>(nullptr);
  }

  LoginRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginRsp& from);
  void MergeFrom(const LoginRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chat.LoginRsp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2eproto);
    return ::descriptor_table_chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // uint32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:chat.LoginRsp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChatMsgHead

// .chat.msg_type type = 1;
inline void ChatMsgHead::clear_type() {
  type_ = 0;
}
inline ::chat::msg_type ChatMsgHead::_internal_type() const {
  return static_cast< ::chat::msg_type >(type_);
}
inline ::chat::msg_type ChatMsgHead::type() const {
  // @@protoc_insertion_point(field_get:chat.ChatMsgHead.type)
  return _internal_type();
}
inline void ChatMsgHead::_internal_set_type(::chat::msg_type value) {
  
  type_ = value;
}
inline void ChatMsgHead::set_type(::chat::msg_type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:chat.ChatMsgHead.type)
}

// .chat.msg_req req = 2;
inline void ChatMsgHead::clear_req() {
  req_ = 0;
}
inline ::chat::msg_req ChatMsgHead::_internal_req() const {
  return static_cast< ::chat::msg_req >(req_);
}
inline ::chat::msg_req ChatMsgHead::req() const {
  // @@protoc_insertion_point(field_get:chat.ChatMsgHead.req)
  return _internal_req();
}
inline void ChatMsgHead::_internal_set_req(::chat::msg_req value) {
  
  req_ = value;
}
inline void ChatMsgHead::set_req(::chat::msg_req value) {
  _internal_set_req(value);
  // @@protoc_insertion_point(field_set:chat.ChatMsgHead.req)
}

// uint64 time = 3;
inline void ChatMsgHead::clear_time() {
  time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChatMsgHead::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChatMsgHead::time() const {
  // @@protoc_insertion_point(field_get:chat.ChatMsgHead.time)
  return _internal_time();
}
inline void ChatMsgHead::_internal_set_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  time_ = value;
}
inline void ChatMsgHead::set_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:chat.ChatMsgHead.time)
}

// uint32 msg_len = 4;
inline void ChatMsgHead::clear_msg_len() {
  msg_len_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChatMsgHead::_internal_msg_len() const {
  return msg_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChatMsgHead::msg_len() const {
  // @@protoc_insertion_point(field_get:chat.ChatMsgHead.msg_len)
  return _internal_msg_len();
}
inline void ChatMsgHead::_internal_set_msg_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  msg_len_ = value;
}
inline void ChatMsgHead::set_msg_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_msg_len(value);
  // @@protoc_insertion_point(field_set:chat.ChatMsgHead.msg_len)
}

// -------------------------------------------------------------------

// LoginReq

// uint32 uid = 1;
inline void LoginReq::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoginReq::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoginReq::uid() const {
  // @@protoc_insertion_point(field_get:chat.LoginReq.uid)
  return _internal_uid();
}
inline void LoginReq::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void LoginReq::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:chat.LoginReq.uid)
}

// string uname = 2;
inline void LoginReq::clear_uname() {
  uname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginReq::uname() const {
  // @@protoc_insertion_point(field_get:chat.LoginReq.uname)
  return _internal_uname();
}
inline void LoginReq::set_uname(const std::string& value) {
  _internal_set_uname(value);
  // @@protoc_insertion_point(field_set:chat.LoginReq.uname)
}
inline std::string* LoginReq::mutable_uname() {
  // @@protoc_insertion_point(field_mutable:chat.LoginReq.uname)
  return _internal_mutable_uname();
}
inline const std::string& LoginReq::_internal_uname() const {
  return uname_.GetNoArena();
}
inline void LoginReq::_internal_set_uname(const std::string& value) {
  
  uname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginReq::set_uname(std::string&& value) {
  
  uname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.LoginReq.uname)
}
inline void LoginReq::set_uname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.LoginReq.uname)
}
inline void LoginReq::set_uname(const char* value, size_t size) {
  
  uname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.LoginReq.uname)
}
inline std::string* LoginReq::_internal_mutable_uname() {
  
  return uname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginReq::release_uname() {
  // @@protoc_insertion_point(field_release:chat.LoginReq.uname)
  
  return uname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginReq::set_allocated_uname(std::string* uname) {
  if (uname != nullptr) {
    
  } else {
    
  }
  uname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uname);
  // @@protoc_insertion_point(field_set_allocated:chat.LoginReq.uname)
}

// -------------------------------------------------------------------

// LoginRsp

// uint32 status = 1;
inline void LoginRsp::clear_status() {
  status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoginRsp::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoginRsp::status() const {
  // @@protoc_insertion_point(field_get:chat.LoginRsp.status)
  return _internal_status();
}
inline void LoginRsp::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  status_ = value;
}
inline void LoginRsp::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:chat.LoginRsp.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chat

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::chat::msg_type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chat::msg_type>() {
  return ::chat::msg_type_descriptor();
}
template <> struct is_proto_enum< ::chat::msg_req> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chat::msg_req>() {
  return ::chat::msg_req_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chat_2eproto
